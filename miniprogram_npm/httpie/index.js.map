{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const { request } = require('https');\nconst { globalAgent } = require('http');\nconst { parse, resolve } = require('url');\n\nfunction toError(rej, res, err) {\n\terr = err || new Error(res.statusMessage);\n\terr.statusMessage = res.statusMessage;\n\terr.statusCode = res.statusCode;\n\terr.headers = res.headers;\n\terr.data = res.data;\n\trej(err);\n}\n\nfunction send(method, uri, opts={}) {\n\treturn new Promise((res, rej) => {\n\t\tlet req, tmp, out = '';\n\t\tlet { redirect=true } = opts;\n\t\topts.method = method;\n\n\t\tif (uri && !!uri.toJSON) uri = uri.toJSON();\n\t\tObject.assign(opts, typeof uri === 'string' ? parse(uri) : uri);\n\t\topts.agent = opts.protocol === 'http:' ? globalAgent : void 0;\n\n\t\treq = request(opts, rr => {\n\t\t\tif (rr.statusCode > 300 && redirect && rr.headers.location) {\n\t\t\t\topts.path = resolve(opts.path, rr.headers.location);\n\t\t\t\treturn send(method, opts.path.startsWith('/') ? opts : opts.path, opts).then(res, rej);\n\t\t\t}\n\n\t\t\trr.on('data', d => {\n\t\t\t\tout += d;\n\t\t\t});\n\n\t\t\trr.on('end', () => {\n\t\t\t\ttmp = rr.headers['content-type'];\n\t\t\t\tif (tmp && out && tmp.includes('application/json')) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tout = JSON.parse(out, opts.reviver);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treturn toError(rej, rr, err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trr.data = out;\n\t\t\t\tif (rr.statusCode >= 400) {\n\t\t\t\t\ttoError(rej, rr);\n\t\t\t\t} else {\n\t\t\t\t\tres(rr);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treq.on('timeout', req.abort);\n\t\treq.on('error', err => {\n\t\t\t// Node 11.x ~> boolean, else timestamp\n\t\t\terr.timeout = req.aborted;\n\t\t\trej(err);\n\t\t});\n\n\t\tif (opts.body) {\n\t\t\ttmp = typeof opts.body === 'object' && !Buffer.isBuffer(opts.body);\n\t\t\ttmp && req.setHeader('content-type', 'application/json');\n\t\t\ttmp = tmp ? JSON.stringify(opts.body) : opts.body;\n\n\t\t\treq.setHeader('content-length', Buffer.byteLength(tmp));\n\t\t\treq.write(tmp);\n\t\t}\n\n\t\treq.end();\n\t});\n}\n\nconst get = /*#__PURE__*/ send.bind(send, 'GET');\nconst post = /*#__PURE__*/ send.bind(send, 'POST');\nconst patch = /*#__PURE__*/ send.bind(send, 'PATCH');\nconst del = /*#__PURE__*/ send.bind(send, 'DELETE');\nconst put = /*#__PURE__*/ send.bind(send, 'PUT');\n\nexports.del = del;\nexports.get = get;\nexports.patch = patch;\nexports.post = post;\nexports.put = put;\nexports.send = send;"]}